'''
github.com/uxai/gridlock

Thanks for your interest in GRIDLOCK
I plan to do slow improvements here and there on methods, or enabling files in the near future.
If you have suggestions or improvements, let me know! I'm new to Python so I'm still learning ^^;

TABLE OF CONTENTS
-------------------------------------------------------------
Line #      Description
-------------------------------------------------------------
22          Imports and global variables
34          Clear screen function
44          About grid encryption function
55          Merge string
63          Read in message to be encrypted/decrypted
87          Print final details for encrypted messages
106         Encrypt message function
152         Decrypt message function
198         Main function
'''
#!/usr/bin/env python3
import os
import secrets

# Colors used in the text interface
COLORS = {"cyan": '\033[1;36;48m', "green": '\033[1;32;48m', "red": '\033[1;31;48m', "end": '\033[0m'}

# ALl characters, you can add more as needed.
ALPHA = ("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "+", "=", "[", "]", "{", "}", "\\", "|", ";", ":", "\"", "\'", "<", ">", ",", ".", "?", "/", "`", "£", "¥", " ")

grid_height = range(-1, 2)
grid_width = range(-1, 2)

def clear():
    os.system('cls||clear')

clear()

# About GRIDENCRYPTION
def about_gridencryption():
    print("Hello and thanks for your interest!")
    print("I created this as an experiment into cyber security and encryption")
    print("If you have feedback, please contact me with a method below.")
    print("------------------------")
    print("Github:  github.com/uxai")
    print("Twitter: @uxai_")
    print("Email:   sudo@uxai.net")
    print("------------------------")


# Merge the final output to a single string
def merge_string(matrix):
    msg = ""
    for r in range(0, len(matrix)):
        for c in range(0, len(matrix[r])):
            msg += matrix[r][c]
    return msg


# Get the content for encryption or decryption
def read_contents(line_length, method):
    matrix = []

    content = input(f"Type or paste the message to be {method}: ")
    clear()
    if line_length > len(content):
        line_end = len(content)
    else:
        line_end = line_length
    line_start = 0
    while line_start < len(content):
        character_array = []
        for i in range(line_start, line_end):
            if content[i]:
                character_array.append(content[i]) 
        matrix.append(character_array)
        line_start += line_length
        line_end += line_length
        if(line_end > len(content)):
            line_end = len(content)

    return matrix


# Print final output of encryption
def print_final(matrix, void_spaces, offset, alpha_shuffled):

    # Print the encrypted message
    encrypted_message = merge_string(matrix)

    print(f"{COLORS['green']}SECRET KEYS{COLORS['end']}")
    print(f"{COLORS['red']}Save the following information in a safe place.{COLORS['end']}")
    print("------------")
    print(f"ALPHA KEY:\n{merge_string(alpha_shuffled)}")
    print("------------")
    print(f"INDEX OFFSET:  {offset}")
    print(f"LINE LENGTH:   {len(matrix[0])}")
    print(f"VOID SPACES:   {void_spaces}")
    print(f"GRID HEIGHT:   {grid_height}")
    print(f"GRID WIDTH:    {grid_width}\n")
    print(f"{COLORS['cyan']}Your encrypted message:{COLORS['end']}")
    print(encrypted_message)


# Encrypt the given message in the matrix list
def encrypt_message():
    sys_ran = secrets.SystemRandom()
    # The length of each line for our matrix
    line_length = sys_ran.randint(1, 20)
    matrix = read_contents(line_length, "encrypted")

    total_lines = len(matrix)
    # offset the number generated by the grid
    offset = sys_ran.randint(1, 100)
    # When a value doesn't exist, it assigns this number as its 'index'
    void_spaces = sys_ran.randint(1, 10)
    # Initiate randomization of ALPHA set
    alpha_shuffled = list(ALPHA)
    sys_ran.shuffle(alpha_shuffled)
 
    # Start from the first line in the array - referred to as the y-axis position or ypos    
    for ypos in range(0, total_lines):
        # Cycle through each letter in the given row.
        for xpos in range(0, len(matrix[ypos])):
            new_key = offset
            '''
            Cycles through the surrounding grid - default is a 3x3 grid
            If you want to change the size of the grid - update the ranges on line 9/10.
            See the notes in github for more details.
            '''
            for y in grid_height:
                ygrid = ypos + y
                if ygrid < 0 or ygrid >= total_lines:
                    new_key += 3 * void_spaces                    
                else:
                    for x in grid_width:
                        xgrid = xpos + x
                        if xgrid < 0 or xgrid >= len(matrix[ygrid]):
                            new_key += void_spaces
                        elif (ygrid == ypos and xgrid < xpos) or ygrid > ypos:
                            new_key += alpha_shuffled.index(matrix[ygrid][xgrid])
                        elif (ygrid == ypos and xgrid > xpos) or ygrid < ypos:
                            new_key += ALPHA.index(matrix[ygrid][xgrid])
                        elif ygrid == ypos and xgrid == xpos:
                            new_key += ALPHA.index(matrix[ygrid][xgrid])

            if new_key >= len(alpha_shuffled):
                new_key = new_key % len(alpha_shuffled)
            matrix[ypos][xpos] = alpha_shuffled[new_key]
    print_final(matrix, void_spaces, offset, alpha_shuffled)


def decrypt_message():
    offset = int(input("We will now request your secret keys to be able to decrypt.\nWhat is the index offset?: "))
    line_length = int(input("What is the line length?: "))
    void_spaces = int(input("What is the value of void spaces?: "))
    h1, h2 = [int(h) for h in input("What is the height of your grid? for example: -1, 2: ").split(', ')]
    w1, w2 = [int(w) for w in input("What is the width of your grid? for example: -1, 2: ").split(', ')]
    grid_height = range(h1, h2)
    grid_width = range(w1, w2)

    matrix = read_contents(line_length, "decrypted")
    total_lines = len(matrix) 
    alpha_key = input("What is your alpha key?: ")
    clear()
    alpha_shuffled = []
    for c in alpha_key:
        alpha_shuffled.append(c)

    # Start from the first line in the array - referred to as the y-axis position or ypos    
    for ypos in reversed(range(0, total_lines)):
        # Cycle through each letter in the given row.
        for xpos in reversed(range(0, len(matrix[ypos]))):

            new_key = offset
            for y in grid_height:
                ygrid = ypos + y
                if ygrid < 0 or ygrid >= total_lines:
                    new_key += 3 * void_spaces                
                else:
                    for x in grid_width:
                        xgrid = xpos + x
                        if xgrid < 0 or xgrid >= len(matrix[ygrid]):
                            new_key += void_spaces
                        elif (ygrid == ypos and xgrid < xpos) or ygrid > ypos:
                            new_key += alpha_shuffled.index(matrix[ygrid][xgrid])
                        elif (ygrid == ypos and xgrid > xpos) or ygrid < ypos:
                            new_key += ALPHA.index(matrix[ygrid][xgrid])

            if new_key >= len(alpha_shuffled):
                new_key = new_key % len(alpha_shuffled)
            new_key = alpha_shuffled.index(matrix[ypos][xpos]) - new_key 
            matrix[ypos][xpos] = ALPHA[new_key]
    decrypted_message = merge_string(matrix)
    print(f"{COLORS['cyan']}Your decrypted message is:{COLORS['end']}")
    print(decrypted_message)


def main():
    while True:
        print(f"{COLORS['red']}Welcome to G̶R̶I̶D̶L̶O̶C̶K̶{COLORS['end']}")
        print("+---------------------------+")
        print("| 1. Encrypt Message        |")
        print("| 2. Decrypt Message        |")
        print("| 3. About Grid Encryption  |")
        print("| 4. Quit                   |")
        print("+---------------------------+")
        option = int(input("Select a menu option: "))
        if option == 1:
            clear()
            encrypt_message()
        elif option == 2:
            clear()
            decrypt_message()
        elif option == 3:
            clear()
            about_gridencryption()
        elif option == 4:
            break
        else:
            pass
        input('\nPress "enter" to continue...')
        clear()


if __name__ == '__main__':
    main()
